{
  "key": "screensList",
  "value": [
    {
      "component": "ログインフォーム（メールアドレス パスワード） ログインボタン パスワードリセットリンク",
      "accessRight": "ゲスト",
      "fileName": "login.tsx",
      "operatingProcedure": "1. メールアドレスを入力\n2. パスワードを入力\n3. ログインボタンをクリック\n4. 認証成功時はダッシュボードへ遷移 失敗時はエラーメッセージを表示",
      "description": "ユーザーがシステムにログインするための画面",
      "id": "SCR-001",
      "screenName": "ログイン画面",
      "category": "認証",
      "user": "新規事業企画部門 開発部門 営業部門",
      "relatedBackendHandles": [
        {
          "fileName": "auth.ts",
          "handleProcedure": "1. クライアントから受け取ったメールアドレスとパスワードを検証\n2. データベースでユーザー情報を確認\n3. パスワードのハッシュを比較\n4. 認証成功時にJWTトークンを生成\n5. 生成したトークンをクライアントに返す",
          "relatedScreen": "SCR-001",
          "handleName": "ユーザー認証",
          "description": "ユーザーのログイン認証を処理し JWTトークンを発行する",
          "id": "BAC-001",
          "category": "認証",
          "relatedFrontendCode": "import React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { supabase } from '@/supabase';\nimport Topbar from '@/components/Topbar';\nimport { FiMail, FiLock } from 'react-icons/fi';\n\nconst LoginPage: React.FC = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const router = useRouter();\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      const { error } = await supabase.auth.signIn({ email, password });\n      if (error) throw error;\n      router.push('/dashboard');\n    } catch (error) {\n      setError('ログインに失敗しました。メールアドレスとパスワードを確認してください。');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100 flex flex-col\">\n      <Topbar />\n      <div className=\"flex-grow flex items-center justify-center\">\n        <div className=\"bg-white p-8 rounded-lg shadow-md w-full max-w-md\">\n          <h1 className=\"text-2xl font-bold mb-6 text-center text-gray-800\">ログイン</h1>\n          {error && (\n            <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\" role=\"alert\">\n              <span className=\"block sm:inline\">{error}</span>\n            </div>\n          )}\n          <form onSubmit={handleLogin}>\n            <div className=\"mb-4\">\n              <label htmlFor=\"email\" className=\"block text-gray-700 text-sm font-bold mb-2\">\n                メールアドレス\n              </label>\n              <div className=\"relative\">\n                <input\n                  type=\"email\"\n                  id=\"email\"\n                  className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline pl-10\"\n                  placeholder=\"your@email.com\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                />\n                <FiMail className=\"absolute left-3 top-3 text-gray-400\" />\n              </div>\n            </div>\n            <div className=\"mb-6\">\n              <label htmlFor=\"password\" className=\"block text-gray-700 text-sm font-bold mb-2\">\n                パスワード\n              </label>\n              <div className=\"relative\">\n                <input\n                  type=\"password\"\n                  id=\"password\"\n                  className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline pl-10\"\n                  placeholder=\"********\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                />\n                <FiLock className=\"absolute left-3 top-3 text-gray-400\" />\n              </div>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <button\n                className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline w-full\"\n                type=\"submit\"\n              >\n                ログイン\n              </button>\n            </div>\n          </form>\n          <div className=\"text-center mt-4\">\n            <Link href=\"/reset-password\" className=\"inline-block align-baseline font-bold text-sm text-blue-500 hover:text-blue-800\">\n              パスワードを忘れた場合\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginPage;"
        }
      ]
    },
    {
      "component": "プロジェクト一覧 新規プロジェクト作成ボタン 各機能へのクイックアクセスリンク",
      "accessRight": "ログインユーザー",
      "fileName": "dashboard.tsx",
      "operatingProcedure": "1. プロジェクト一覧から既存プロジェクトを選択\n2. 新規プロジェクト作成ボタンをクリックして新規作成\n3. クイックアクセスリンクから各機能画面へ遷移",
      "description": "ユーザーのプロジェクト概要と主要機能へのアクセスを提供する画面",
      "id": "SCR-002",
      "screenName": "ダッシュボード",
      "category": "メイン",
      "user": "新規事業企画部門 開発部門 営業部門",
      "relatedBackendHandles": []
    },
    {
      "component": "ファイル選択ボタン ドラッグ&ドロップエリア アップロードボタン",
      "accessRight": "ログインユーザー",
      "fileName": "file-upload.tsx",
      "operatingProcedure": "1. ファイル選択ボタンをクリックしてファイルを選択またはドラッグ&ドロップでファイルを指定\n2. アップロードボタンをクリックしてファイルをアップロード\n3. アップロード完了後 ドキュメント生成画面へ自動遷移",
      "description": "テキストファイルまたはPDFファイルをアップロードする画面",
      "id": "SCR-003",
      "screenName": "ファイルアップロード画面",
      "category": "入力",
      "user": "新規事業企画部門 開発部門 営業部門",
      "relatedBackendHandles": [
        {
          "fileName": "file-upload.ts",
          "handleProcedure": "1. マルチパートフォームデータを解析\n2. ファイルの種類とサイズを検証\n3. 一時的なストレージにファイルを保存\n4. 保存されたファイルのパスをデータベースに記録\n5. ファイルの保存場所情報をクライアントに返す",
          "relatedScreen": "SCR-003",
          "handleName": "ファイルアップロード処理",
          "description": "クライアントからアップロードされたファイルを受け取り 一時保存する",
          "id": "BAC-002",
          "category": "ファイル処理",
          "relatedFrontendCode": "import React, { useState, useCallback } from 'react';\nimport { useRouter } from 'next/router';\nimport { useDropzone } from 'react-dropzone';\nimport axios from 'axios';\nimport { FiUpload } from 'react-icons/fi';\nimport Topbar from '@/components/Topbar';\nimport { supabase } from '@/supabase';\n\nconst FileUpload: React.FC = () => {\n  const [file, setFile] = useState<File | null>(null);\n  const [uploading, setUploading] = useState(false);\n  const router = useRouter();\n\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    setFile(acceptedFiles[0]);\n  }, []);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'text/plain': ['.txt'],\n      'application/pdf': ['.pdf'],\n    },\n    multiple: false,\n  });\n\n  const handleUpload = async () => {\n    if (!file) return;\n\n    setUploading(true);\n    const formData = new FormData();\n    formData.append('file', file);\n\n    try {\n      const response = await axios.post('/api/file-upload', formData, {\n        headers: { 'Content-Type': 'multipart/form-data' },\n      });\n\n      if (response.status === 200) {\n        router.push('/document-generation');\n      }\n    } catch (error) {\n      console.error('ファイルアップロードエラー:', error);\n      alert('ファイルのアップロードに失敗しました。');\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-6 text-gray-800\">ファイルアップロード</h1>\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\n          <div\n            {...getRootProps()}\n            className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${\n              isDragActive ? 'border-blue-500 bg-blue-50' : 'border-gray-300'\n            }`}\n          >\n            <input {...getInputProps()} />\n            <FiUpload className=\"mx-auto text-4xl text-gray-400 mb-4\" />\n            {isDragActive ? (\n              <p className=\"text-blue-500\">ファイルをドロップしてください</p>\n            ) : (\n              <p className=\"text-gray-500\">\n                クリックしてファイルを選択するか、ここにファイルをドラッグ＆ドロップしてください\n              </p>\n            )}\n            <p className=\"text-sm text-gray-400 mt-2\">\n              対応ファイル形式: テキストファイル(.txt)、PDFファイル(.pdf)\n            </p>\n          </div>\n          {file && (\n            <div className=\"mt-4\">\n              <p className=\"text-sm text-gray-600\">選択されたファイル: {file.name}</p>\n            </div>\n          )}\n          <button\n            onClick={handleUpload}\n            disabled={!file || uploading}\n            className={`mt-6 w-full py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 ${\n              (!file || uploading) && 'opacity-50 cursor-not-allowed'\n            }`}\n          >\n            {uploading ? 'アップロード中...' : 'アップロード'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FileUpload;"
        }
      ]
    },
    {
      "component": "生成オプション選択 生成開始ボタン 生成進捗表示",
      "accessRight": "ログインユーザー",
      "fileName": "document-generation.tsx",
      "operatingProcedure": "1. 生成するドキュメントの種類を選択\n2. 生成開始ボタンをクリック\n3. 生成進捗をリアルタイムで表示\n4. 生成完了後 ドキュメント表示画面へ自動遷移",
      "description": "アップロードしたファイルから開発ドキュメントを生成する画面",
      "id": "SCR-004",
      "screenName": "ドキュメント生成画面",
      "category": "生成",
      "user": "新規事業企画部門 開発部門",
      "relatedBackendHandles": [
        {
          "fileName": "document-generation.ts",
          "handleProcedure": "1. データベースから対象ファイルの情報を取得\n2. ファイルの内容を読み込み\n3. AIモデルにファイル内容を入力し ドキュメントを生成\n4. 生成されたドキュメントをフォーマット\n5. 生成結果をデータベースに保存\n6. 生成完了通知をクライアントに送信",
          "relatedScreen": "SCR-004",
          "handleName": "ドキュメント生成",
          "description": "アップロードされたファイルの内容を分析し AIを使用して開発ドキュメントを生成する",
          "id": "BAC-003",
          "category": "AI処理",
          "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { createClient } from '@supabase/supabase-js';\nimport Topbar from '@/components/Topbar';\nimport { FaFileAlt, FaPlay, FaSpinner } from 'react-icons/fa';\n\nconst supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!);\n\nconst DocumentGeneration = () => {\n  const router = useRouter();\n  const [documentType, setDocumentType] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [progress, setProgress] = useState(0);\n\n  useEffect(() => {\n    const checkUser = async () => {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        router.push('/login');\n      }\n    };\n    checkUser();\n  }, [router]);\n\n  const handleDocumentTypeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setDocumentType(e.target.value);\n  };\n\n  const handleGenerateDocument = async () => {\n    if (!documentType) {\n      alert('ドキュメントの種類を選択してください。');\n      return;\n    }\n\n    setIsGenerating(true);\n    setProgress(0);\n\n    try {\n      // ここでバックエンドAPIを呼び出し、ドキュメント生成を開始します\n      // 実際のAPIエンドポイントに置き換えてください\n      const response = await fetch('/api/generate-document', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ documentType }),\n      });\n\n      if (!response.ok) {\n        throw new Error('ドキュメント生成に失敗しました');\n      }\n\n      // 進捗をシミュレートします\n      const interval = setInterval(() => {\n        setProgress((prevProgress) => {\n          if (prevProgress >= 100) {\n            clearInterval(interval);\n            return 100;\n          }\n          return prevProgress + 10;\n        });\n      }, 500);\n\n      // 生成完了を待ちます\n      await new Promise(resolve => setTimeout(resolve, 5000));\n\n      clearInterval(interval);\n      setProgress(100);\n\n      // 生成完了後、ドキュメント表示画面へ遷移します\n      router.push('/document-display');\n    } catch (error) {\n      console.error('Error generating document:', error);\n      alert('ドキュメント生成中にエラーが発生しました。');\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-8 text-center text-gray-800\">ドキュメント生成</h1>\n        <div className=\"bg-white shadow-md rounded-lg p-6 max-w-md mx-auto\">\n          <div className=\"mb-6\">\n            <label htmlFor=\"documentType\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              生成するドキュメントの種類\n            </label>\n            <select\n              id=\"documentType\"\n              value={documentType}\n              onChange={handleDocumentTypeChange}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            >\n              <option value=\"\">選択してください</option>\n              <option value=\"requirements\">要件定義書</option>\n              <option value=\"design\">設計書</option>\n              <option value=\"test\">テスト仕様書</option>\n            </select>\n          </div>\n          <button\n            onClick={handleGenerateDocument}\n            disabled={isGenerating}\n            className={`w-full flex items-center justify-center px-4 py-2 border border-transparent text-base font-medium rounded-md text-white ${\n              isGenerating ? 'bg-gray-400' : 'bg-blue-600 hover:bg-blue-700'\n            } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500`}\n          >\n            {isGenerating ? (\n              <>\n                <FaSpinner className=\"animate-spin mr-2\" />\n                生成中...\n              </>\n            ) : (\n              <>\n                <FaPlay className=\"mr-2\" />\n                生成開始\n              </>\n            )}\n          </button>\n          {isGenerating && (\n            <div className=\"mt-4\">\n              <div className=\"relative pt-1\">\n                <div className=\"flex mb-2 items-center justify-between\">\n                  <div>\n                    <span className=\"text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-blue-600 bg-blue-200\">\n                      生成進捗\n                    </span>\n                  </div>\n                  <div className=\"text-right\">\n                    <span className=\"text-xs font-semibold inline-block text-blue-600\">\n                      {progress}%\n                    </span>\n                  </div>\n                </div>\n                <div className=\"overflow-hidden h-2 mb-4 text-xs flex rounded bg-blue-200\">\n                  <div\n                    style={{ width: `${progress}%` }}\n                    className=\"shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500\"\n                  ></div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DocumentGeneration;"
        }
      ]
    },
    {
      "component": "生成対象選択 プログラミング言語選択 生成開始ボタン 生成進捗表示",
      "accessRight": "ログインユーザー",
      "fileName": "code-generation.tsx",
      "operatingProcedure": "1. 生成対象のドキュメントを選択\n2. 生成するプログラミング言語を選択\n3. 生成開始ボタンをクリック\n4. 生成進捗をリアルタイムで表示\n5. 生成完了後 ソースコード表示画面へ自動遷移",
      "description": "生成された開発ドキュメントからソースコードを生成する画面",
      "id": "SCR-005",
      "screenName": "ソースコード生成画面",
      "category": "生成",
      "user": "開発部門",
      "relatedBackendHandles": [
        {
          "fileName": "code-generation.ts",
          "handleProcedure": "1. データベースから対象ドキュメントの情報を取得\n2. ドキュメントの内容を解析\n3. AIモデルにドキュメント内容を入力し ソースコードを生成\n4. 生成されたコードをフォーマットおよび最適化\n5. 生成結果をデータベースに保存\n6. 生成完了通知をクライアントに送信",
          "relatedScreen": "SCR-005",
          "handleName": "ソースコード生成",
          "description": "生成された開発ドキュメントを基に AIを使用してソースコードを生成する",
          "id": "BAC-004",
          "category": "AI処理",
          "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport Topbar from '@/components/Topbar';\nimport { supabase } from '@/supabase';\nimport { FiFile, FiCode, FiPlay, FiLoader } from 'react-icons/fi';\nimport axios from 'axios';\n\nconst CodeGenerationPage: React.FC = () => {\n  const router = useRouter();\n  const [selectedDocument, setSelectedDocument] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [documents, setDocuments] = useState([]);\n\n  useEffect(() => {\n    fetchDocuments();\n  }, []);\n\n  const fetchDocuments = async () => {\n    const { data, error } = await supabase\n      .from('documents')\n      .select('id, content')\n      .eq('type', '開発');\n\n    if (error) {\n      console.error('ドキュメントの取得に失敗しました:', error);\n    } else {\n      setDocuments(data);\n    }\n  };\n\n  const handleDocumentChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedDocument(e.target.value);\n  };\n\n  const handleLanguageChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedLanguage(e.target.value);\n  };\n\n  const handleGenerateCode = async () => {\n    if (!selectedDocument || !selectedLanguage) {\n      alert('ドキュメントとプログラミング言語を選択してください。');\n      return;\n    }\n\n    setIsGenerating(true);\n    setProgress(0);\n\n    try {\n      const response = await axios.post('/api/code-generation', {\n        documentId: selectedDocument,\n        language: selectedLanguage,\n      });\n\n      const intervalId = setInterval(() => {\n        setProgress((prevProgress) => {\n          if (prevProgress >= 100) {\n            clearInterval(intervalId);\n            return 100;\n          }\n          return prevProgress + 10;\n        });\n      }, 500);\n\n      setTimeout(() => {\n        clearInterval(intervalId);\n        setIsGenerating(false);\n        setProgress(100);\n        router.push('/source-code-display');\n      }, 5000);\n    } catch (error) {\n      console.error('コード生成中にエラーが発生しました:', error);\n      setIsGenerating(false);\n      alert('コード生成に失敗しました。もう一度お試しください。');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-8 text-gray-800\">ソースコード生成</h1>\n        <div className=\"bg-white shadow-md rounded-lg p-6\">\n          <div className=\"mb-6\">\n            <label htmlFor=\"document\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              生成対象ドキュメント\n            </label>\n            <select\n              id=\"document\"\n              className=\"w-full p-2 border border-gray-300 rounded-md\"\n              value={selectedDocument}\n              onChange={handleDocumentChange}\n            >\n              <option value=\"\">選択してください</option>\n              {documents.map((doc: any) => (\n                <option key={doc.id} value={doc.id}>\n                  {doc.content.title}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"mb-6\">\n            <label htmlFor=\"language\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              プログラミング言語\n            </label>\n            <select\n              id=\"language\"\n              className=\"w-full p-2 border border-gray-300 rounded-md\"\n              value={selectedLanguage}\n              onChange={handleLanguageChange}\n            >\n              <option value=\"\">選択してください</option>\n              <option value=\"javascript\">JavaScript</option>\n              <option value=\"python\">Python</option>\n              <option value=\"java\">Java</option>\n              <option value=\"csharp\">C#</option>\n            </select>\n          </div>\n          <button\n            onClick={handleGenerateCode}\n            disabled={isGenerating}\n            className=\"w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition duration-300 flex items-center justify-center\"\n          >\n            {isGenerating ? (\n              <>\n                <FiLoader className=\"animate-spin mr-2\" />\n                生成中...\n              </>\n            ) : (\n              <>\n                <FiPlay className=\"mr-2\" />\n                生成開始\n              </>\n            )}\n          </button>\n          {isGenerating && (\n            <div className=\"mt-6\">\n              <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n                <div\n                  className=\"bg-blue-600 h-2.5 rounded-full transition-all duration-500\"\n                  style={{ width: `${progress}%` }}\n                ></div>\n              </div>\n              <p className=\"text-sm text-gray-600 mt-2\">進捗: {progress}%</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CodeGenerationPage;"
        }
      ]
    },
    {
      "component": "チェック対象選択 チェック開始ボタン チェック進捗表示",
      "accessRight": "ログインユーザー",
      "fileName": "quality-check.tsx",
      "operatingProcedure": "1. チェック対象のドキュメントまたはソースコードを選択\n2. チェック開始ボタンをクリック\n3. チェック進捗をリアルタイムで表示\n4. チェック完了後 品質チェック結果画面へ自動遷移",
      "description": "生成されたドキュメントとソースコードの品質を自動チェックする画面",
      "id": "SCR-006",
      "screenName": "品質チェック画面",
      "category": "品質管理",
      "user": "開発部門",
      "relatedBackendHandles": [
        {
          "fileName": "quality-check.ts",
          "handleProcedure": "1. データベースから対象ドキュメントとコードを取得\n2. ドキュメントの一貫性と完全性をチェック\n3. コードの構文エラーおよびベストプラクティス違反をチェック\n4. チェック結果をスコア化\n5. 詳細な問題点と改善提案を生成\n6. チェック結果をデータベースに保存\n7. 結果サマリーをクライアントに送信",
          "relatedScreen": "SCR-006",
          "handleName": "自動品質チェック",
          "description": "生成されたドキュメントとソースコードの品質を自動でチェックする",
          "id": "BAC-005",
          "category": "品質管理",
          "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport axios from 'axios';\nimport { FaCheck, FaSpinner } from 'react-icons/fa';\nimport Topbar from '@/components/Topbar';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY);\n\nconst QualityCheck: React.FC = () => {\n  const router = useRouter();\n  const [selectedItems, setSelectedItems] = useState<string[]>([]);\n  const [isChecking, setIsChecking] = useState(false);\n  const [progress, setProgress] = useState(0);\n\n  const handleItemSelect = (item: string) => {\n    setSelectedItems(prev => \n      prev.includes(item) ? prev.filter(i => i !== item) : [...prev, item]\n    );\n  };\n\n  const startCheck = async () => {\n    if (selectedItems.length === 0) {\n      alert('チェック対象を選択してください。');\n      return;\n    }\n\n    setIsChecking(true);\n    setProgress(0);\n\n    try {\n      const response = await axios.post('/api/quality-check', { items: selectedItems });\n      \n      // プログレスバーのシミュレーション\n      for (let i = 0; i <= 100; i += 10) {\n        setProgress(i);\n        await new Promise(resolve => setTimeout(resolve, 500));\n      }\n\n      // チェック完了後、結果画面へ遷移\n      router.push('/quality-check-result');\n    } catch (error) {\n      console.error('品質チェックに失敗しました', error);\n      alert('品質チェックに失敗しました。もう一度お試しください。');\n    } finally {\n      setIsChecking(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-6 text-gray-800\">品質チェック</h1>\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-6\">\n          <h2 className=\"text-xl font-semibold mb-4 text-gray-700\">チェック対象選択</h2>\n          <div className=\"grid grid-cols-2 gap-4 mb-6\">\n            {['ドキュメント', 'ソースコード'].map(item => (\n              <div\n                key={item}\n                className={`p-4 border rounded-lg cursor-pointer transition-colors ${\n                  selectedItems.includes(item) ? 'bg-blue-100 border-blue-500' : 'bg-gray-50 border-gray-300'\n                }`}\n                onClick={() => handleItemSelect(item)}\n              >\n                <div className=\"flex items-center\">\n                  <div className={`w-6 h-6 rounded-full border-2 mr-3 flex items-center justify-center ${\n                    selectedItems.includes(item) ? 'border-blue-500 bg-blue-500' : 'border-gray-400'\n                  }`}>\n                    {selectedItems.includes(item) && <FaCheck className=\"text-white\" />}\n                  </div>\n                  <span className=\"text-lg\">{item}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n          <button\n            onClick={startCheck}\n            disabled={isChecking}\n            className={`w-full py-3 px-6 text-white rounded-lg transition-colors ${\n              isChecking ? 'bg-gray-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700'\n            }`}\n          >\n            {isChecking ? '品質チェック中...' : '品質チェック開始'}\n          </button>\n        </div>\n        {isChecking && (\n          <div className=\"bg-white rounded-lg shadow-md p-6\">\n            <h2 className=\"text-xl font-semibold mb-4 text-gray-700\">チェック進捗</h2>\n            <div className=\"relative pt-1\">\n              <div className=\"flex mb-2 items-center justify-between\">\n                <div>\n                  <span className=\"text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-blue-600 bg-blue-200\">\n                    進行中\n                  </span>\n                </div>\n                <div className=\"text-right\">\n                  <span className=\"text-xs font-semibold inline-block text-blue-600\">\n                    {progress}%\n                  </span>\n                </div>\n              </div>\n              <div className=\"overflow-hidden h-2 mb-4 text-xs flex rounded bg-blue-200\">\n                <div style={{ width: `${progress}%` }} className=\"shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500\"></div>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-center\">\n              <FaSpinner className=\"animate-spin text-blue-500 text-2xl mr-2\" />\n              <span className=\"text-gray-600\">品質チェックを実行中です...</span>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default QualityCheck;"
        }
      ]
    },
    {
      "component": "チェック対象選択 チェック開始ボタン チェック進捗表示",
      "accessRight": "ログインユーザー",
      "fileName": "consistency-check.tsx",
      "operatingProcedure": "1. チェック対象のドキュメントを選択\n2. チェック開始ボタンをクリック\n3. チェック進捗をリアルタイムで表示\n4. チェック完了後 整合性確認結果画面へ自動遷移",
      "description": "各工程間のドキュメントの整合性を自動でチェックする画面",
      "id": "SCR-007",
      "screenName": "整合性確認画面",
      "category": "品質管理",
      "user": "開発部門",
      "relatedBackendHandles": [
        {
          "fileName": "consistency-check.ts",
          "handleProcedure": "1. データベースから関連するすべてのドキュメントを取得\n2. ドキュメント間の関連性を分析\n3. キーワードと概念の一貫性をチェック\n4. 要件とデザインの追跡可能性を確認\n5. 不整合箇所を特定し リスト化\n6. 整合性スコアを計算\n7. チェック結果と修正提案をデータベースに保存\n8. 結果サマリーをクライアントに送信",
          "relatedScreen": "SCR-007",
          "handleName": "ドキュメント整合性チェック",
          "description": "各工程間のドキュメントの整合性を自動でチェックし確保する",
          "id": "BAC-006",
          "category": "品質管理",
          "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { supabase } from '@/supabase';\nimport Topbar from '@/components/Topbar';\nimport { FaCheckCircle, FaSpinner } from 'react-icons/fa';\nimport axios from 'axios';\n\nconst ConsistencyCheck = () => {\n  const router = useRouter();\n  const [selectedDocuments, setSelectedDocuments] = useState([]);\n  const [checkProgress, setCheckProgress] = useState(0);\n  const [isChecking, setIsChecking] = useState(false);\n  const [documents, setDocuments] = useState([]);\n\n  useEffect(() => {\n    fetchDocuments();\n  }, []);\n\n  const fetchDocuments = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('documents')\n        .select('id, type, content')\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      setDocuments(data);\n    } catch (error) {\n      console.error('ドキュメントの取得に失敗しました:', error.message);\n      // サンプルデータを表示\n      setDocuments([\n        { id: 1, type: '要件定義', content: { title: '要件定義書1' } },\n        { id: 2, type: 'システム設計', content: { title: '設計書1' } },\n        { id: 3, type: '開発', content: { title: '開発ドキュメント1' } },\n      ]);\n    }\n  };\n\n  const handleDocumentSelect = (documentId) => {\n    setSelectedDocuments((prev) =>\n      prev.includes(documentId)\n        ? prev.filter((id) => id !== documentId)\n        : [...prev, documentId]\n    );\n  };\n\n  const startConsistencyCheck = async () => {\n    if (selectedDocuments.length === 0) {\n      alert('チェック対象のドキュメントを選択してください。');\n      return;\n    }\n\n    setIsChecking(true);\n    setCheckProgress(0);\n\n    try {\n      const response = await axios.post('/api/consistency-check', {\n        documentIds: selectedDocuments,\n      });\n\n      // 進捗シミュレーション\n      for (let i = 0; i <= 100; i += 10) {\n        setCheckProgress(i);\n        await new Promise((resolve) => setTimeout(resolve, 500));\n      }\n\n      setIsChecking(false);\n      router.push('/consistency-check-result');\n    } catch (error) {\n      console.error('整合性チェックに失敗しました:', error);\n      setIsChecking(false);\n      alert('整合性チェックに失敗しました。もう一度お試しください。');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-6 text-gray-800\">整合性確認画面</h1>\n\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4 text-gray-700\">チェック対象選択</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {documents.map((doc) => (\n              <div\n                key={doc.id}\n                className={`p-4 border rounded-lg cursor-pointer transition-colors ${\n                  selectedDocuments.includes(doc.id)\n                    ? 'bg-blue-100 border-blue-500'\n                    : 'bg-gray-50 border-gray-300 hover:bg-gray-100'\n                }`}\n                onClick={() => handleDocumentSelect(doc.id)}\n              >\n                <h3 className=\"font-medium text-gray-800\">{doc.content.title}</h3>\n                <p className=\"text-sm text-gray-600\">{doc.type}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <button\n          onClick={startConsistencyCheck}\n          disabled={isChecking}\n          className={`px-6 py-3 rounded-lg text-white font-semibold transition-colors ${\n            isChecking\n              ? 'bg-gray-400 cursor-not-allowed'\n              : 'bg-blue-600 hover:bg-blue-700'\n          }`}\n        >\n          {isChecking ? 'チェック中...' : 'チェック開始'}\n        </button>\n\n        {isChecking && (\n          <div className=\"mt-8\">\n            <h2 className=\"text-xl font-semibold mb-4 text-gray-700\">チェック進捗</h2>\n            <div className=\"bg-gray-200 rounded-full h-6 overflow-hidden\">\n              <div\n                className=\"bg-blue-500 h-full transition-all duration-500 ease-out flex items-center justify-center text-white text-sm\"\n                style={{ width: `${checkProgress}%` }}\n              >\n                {checkProgress}%\n              </div>\n            </div>\n            <p className=\"mt-2 text-gray-600 flex items-center\">\n              <FaSpinner className=\"animate-spin mr-2\" />\n              整合性チェック実行中...\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ConsistencyCheck;"
        }
      ]
    },
    {
      "component": "見積対象選択 見積開始ボタン 見積進捗表示",
      "accessRight": "ログインユーザー",
      "fileName": "work-estimation.tsx",
      "operatingProcedure": "1. 見積対象のプロジェクトを選択\n2. 見積開始ボタンをクリック\n3. 見積進捗をリアルタイムで表示\n4. 見積完了後 工数見積結果画面へ自動遷移",
      "description": "生成されたドキュメントとソースコードを基に開発工数を自動で見積もる画面",
      "id": "SCR-008",
      "screenName": "工数見積画面",
      "category": "プロジェクト管理",
      "user": "新規事業企画部門 開発部門",
      "relatedBackendHandles": [
        {
          "fileName": "work-estimation.ts",
          "handleProcedure": "1. データベースからプロジェクト関連のすべての成果物を取得\n2. ドキュメントの量と複雑さを分析\n3. コードの行数と複雑度を計算\n4. 過去のプロジェクトデータと比較\n5. AIモデルを使用して各フェーズの工数を予測\n6. 総工数と内訳を計算\n7. 見積結果をデータベースに保存\n8. 見積サマリーをクライアントに送信",
          "relatedScreen": "SCR-008",
          "handleName": "自動工数見積",
          "description": "生成されたドキュメントとソースコードを基に開発工数を自動で見積もる",
          "id": "BAC-007",
          "category": "プロジェクト管理",
          "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport axios from 'axios';\nimport { FaPlay, FaChartBar } from 'react-icons/fa';\nimport Topbar from '@/components/Topbar';\nimport { supabase } from '@/supabase';\n\nconst WorkEstimation: React.FC = () => {\n  const router = useRouter();\n  const [projects, setProjects] = useState<any[]>([]);\n  const [selectedProject, setSelectedProject] = useState<string>('');\n  const [estimationProgress, setEstimationProgress] = useState<number>(0);\n  const [isEstimating, setIsEstimating] = useState<boolean>(false);\n\n  useEffect(() => {\n    fetchProjects();\n  }, []);\n\n  const fetchProjects = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('projects')\n        .select('id, name');\n      if (error) throw error;\n      setProjects(data || []);\n    } catch (error) {\n      console.error('プロジェクトの取得に失敗しました:', error);\n      setProjects([\n        { id: '1', name: 'プロジェクトA' },\n        { id: '2', name: 'プロジェクトB' },\n        { id: '3', name: 'プロジェクトC' },\n      ]);\n    }\n  };\n\n  const startEstimation = async () => {\n    if (!selectedProject) {\n      alert('プロジェクトを選択してください');\n      return;\n    }\n\n    setIsEstimating(true);\n    setEstimationProgress(0);\n\n    try {\n      const response = await axios.post('/api/work-estimation', { projectId: selectedProject });\n      \n      // 進捗のシミュレーション\n      for (let i = 0; i <= 100; i += 10) {\n        setEstimationProgress(i);\n        await new Promise(resolve => setTimeout(resolve, 500));\n      }\n\n      router.push('/work-estimation-result');\n    } catch (error) {\n      console.error('工数見積に失敗しました:', error);\n      alert('工数見積に失敗しました。もう一度お試しください。');\n    } finally {\n      setIsEstimating(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-6 text-gray-800\">工数見積画面</h1>\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\n          <div className=\"mb-6\">\n            <label htmlFor=\"project\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              見積対象プロジェクト\n            </label>\n            <select\n              id=\"project\"\n              value={selectedProject}\n              onChange={(e) => setSelectedProject(e.target.value)}\n              className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n            >\n              <option value=\"\">プロジェクトを選択してください</option>\n              {projects.map((project) => (\n                <option key={project.id} value={project.id}>\n                  {project.name}\n                </option>\n              ))}\n            </select>\n          </div>\n          <button\n            onClick={startEstimation}\n            disabled={isEstimating}\n            className=\"w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 flex items-center justify-center\"\n          >\n            <FaPlay className=\"mr-2\" />\n            見積開始\n          </button>\n          {isEstimating && (\n            <div className=\"mt-6\">\n              <h2 className=\"text-lg font-semibold mb-2\">見積進捗</h2>\n              <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n                <div\n                  className=\"bg-blue-600 h-2.5 rounded-full\"\n                  style={{ width: `${estimationProgress}%` }}\n                ></div>\n              </div>\n              <p className=\"text-sm text-gray-600 mt-2\">{estimationProgress}% 完了</p>\n            </div>\n          )}\n        </div>\n        <div className=\"mt-8 text-center\">\n          <Link href=\"/dashboard\" className=\"text-blue-600 hover:text-blue-800\">\n            ダッシュボードに戻る\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WorkEstimation;"
        }
      ]
    },
    {
      "component": "資料作成対象選択 テンプレート選択 作成開始ボタン 作成進捗表示",
      "accessRight": "ログインユーザー",
      "fileName": "proposal-creation.tsx",
      "operatingProcedure": "1. 資料作成対象のプロジェクトを選択\n2. 使用するテンプレートを選択\n3. 作成開始ボタンをクリック\n4. 作成進捗をリアルタイムで表示\n5. 作成完了後 提案資料表示画面へ自動遷移",
      "description": "生成されたドキュメントを基にクライアントへの提案資料を自動作成する画面",
      "id": "SCR-009",
      "screenName": "提案資料作成画面",
      "category": "資料作成",
      "user": "営業部門",
      "relatedBackendHandles": [
        {
          "fileName": "proposal-creation.ts",
          "handleProcedure": "1. データベースからプロジェクト情報と関連ドキュメントを取得\n2. 選択されたテンプレートを読み込み\n3. ドキュメントから重要な情報を抽出\n4. テンプレートに情報を適用し 提案資料を生成\n5. 生成された資料を最適化およびフォーマット\n6. 資料をPDF形式に変換\n7. 生成された資料をデータベースに保存\n8. 資料のURLをクライアントに送信",
          "relatedScreen": "SCR-009",
          "handleName": "提案資料自動作成",
          "description": "生成されたドキュメントを基にクライアントへの提案資料を自動作成する",
          "id": "BAC-008",
          "category": "資料作成",
          "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { FaFileAlt, FaPlay, FaSpinner } from 'react-icons/fa';\nimport { supabase } from '@/supabase';\nimport Topbar from '@/components/Topbar';\nimport axios from 'axios';\n\nconst ProposalCreation = () => {\n  const router = useRouter();\n  const [projects, setProjects] = useState([]);\n  const [templates, setTemplates] = useState([]);\n  const [selectedProject, setSelectedProject] = useState(null);\n  const [selectedTemplate, setSelectedTemplate] = useState(null);\n  const [progress, setProgress] = useState(0);\n  const [isCreating, setIsCreating] = useState(false);\n\n  useEffect(() => {\n    fetchProjects();\n    fetchTemplates();\n  }, []);\n\n  const fetchProjects = async () => {\n    const { data, error } = await supabase.from('projects').select('*');\n    if (error) {\n      console.error('プロジェクトの取得に失敗しました:', error);\n      setProjects([{ id: '1', name: 'サンプルプロジェクト1' }, { id: '2', name: 'サンプルプロジェクト2' }]);\n    } else {\n      setProjects(data);\n    }\n  };\n\n  const fetchTemplates = async () => {\n    // テンプレートの取得処理（実際のAPIエンドポイントに合わせて調整してください）\n    try {\n      const response = await axios.get('/api/templates');\n      setTemplates(response.data);\n    } catch (error) {\n      console.error('テンプレートの取得に失敗しました:', error);\n      setTemplates([{ id: '1', name: '基本テンプレート' }, { id: '2', name: '詳細テンプレート' }]);\n    }\n  };\n\n  const handleCreateProposal = async () => {\n    if (!selectedProject || !selectedTemplate) {\n      alert('プロジェクトとテンプレートを選択してください。');\n      return;\n    }\n\n    setIsCreating(true);\n    setProgress(0);\n\n    try {\n      // 提案資料作成のAPIリクエスト（実際のAPIエンドポイントに合わせて調整してください）\n      const response = await axios.post('/api/create-proposal', {\n        projectId: selectedProject,\n        templateId: selectedTemplate,\n      });\n\n      // 進捗状況の更新をシミュレート\n      const interval = setInterval(() => {\n        setProgress((prevProgress) => {\n          if (prevProgress >= 100) {\n            clearInterval(interval);\n            return 100;\n          }\n          return prevProgress + 10;\n        });\n      }, 500);\n\n      // 作成完了後の処理\n      setTimeout(() => {\n        clearInterval(interval);\n        setIsCreating(false);\n        router.push('/proposal-display'); // 提案資料表示画面へ遷移\n      }, 5000);\n    } catch (error) {\n      console.error('提案資料の作成に失敗しました:', error);\n      setIsCreating(false);\n      alert('提案資料の作成に失敗しました。もう一度お試しください。');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-8\">提案資料作成</h1>\n        <div className=\"bg-white shadow-md rounded-lg p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4\">1. 資料作成対象の選択</h2>\n          <select\n            className=\"w-full p-2 border border-gray-300 rounded\"\n            value={selectedProject}\n            onChange={(e) => setSelectedProject(e.target.value)}\n          >\n            <option value=\"\">プロジェクトを選択してください</option>\n            {projects.map((project) => (\n              <option key={project.id} value={project.id}>\n                {project.name}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className=\"bg-white shadow-md rounded-lg p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4\">2. テンプレートの選択</h2>\n          <select\n            className=\"w-full p-2 border border-gray-300 rounded\"\n            value={selectedTemplate}\n            onChange={(e) => setSelectedTemplate(e.target.value)}\n          >\n            <option value=\"\">テンプレートを選択してください</option>\n            {templates.map((template) => (\n              <option key={template.id} value={template.id}>\n                {template.name}\n              </option>\n            ))}\n          </select>\n        </div>\n        <button\n          className=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded flex items-center justify-center w-full\"\n          onClick={handleCreateProposal}\n          disabled={isCreating}\n        >\n          {isCreating ? (\n            <>\n              <FaSpinner className=\"animate-spin mr-2\" />\n              作成中...\n            </>\n          ) : (\n            <>\n              <FaPlay className=\"mr-2\" />\n              作成開始\n            </>\n          )}\n        </button>\n        {isCreating && (\n          <div className=\"mt-8\">\n            <h2 className=\"text-xl font-semibold mb-4\">作成進捗</h2>\n            <div className=\"bg-gray-200 rounded-full h-4 overflow-hidden\">\n              <div\n                className=\"bg-blue-500 h-full\"\n                style={{ width: `${progress}%` }}\n              ></div>\n            </div>\n            <p className=\"text-center mt-2\">{progress}%</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ProposalCreation;"
        }
      ]
    },
    {
      "component": "レポート対象選択 レポート期間設定 生成開始ボタン 生成進捗表示",
      "accessRight": "ログインユーザー",
      "fileName": "progress-report.tsx",
      "operatingProcedure": "1. レポート対象のプロジェクトを選択\n2. レポート期間を設定\n3. 生成開始ボタンをクリック\n4. 生成進捗をリアルタイムで表示\n5. 生成完了後 進捗レポート表示画面へ自動遷移",
      "description": "開発プロセスの進捗状況を自動で集計しレポートを生成する画面",
      "id": "SCR-010",
      "screenName": "進捗レポート画面",
      "category": "レポーティング",
      "user": "新規事業企画部門 開発部門 営業部門",
      "relatedBackendHandles": [
        {
          "fileName": "progress-report.ts",
          "handleProcedure": "1. データベースからプロジェクトの全アクティビティログを取得\n2. 指定された期間のデータをフィルタリング\n3. 各フェーズの進捗率を計算\n4. 全体の進捗率を算出\n5. 主要な課題や遅延要因を特定\n6. グラフと表を含むレポートを生成\n7. 生成されたレポートをデータベースに保存\n8. レポートのサマリーと閲覧用URLをクライアントに送信",
          "relatedScreen": "SCR-010",
          "handleName": "進捗レポート生成",
          "description": "開発プロセスの進捗状況を自動で集計しレポートを生成する",
          "id": "BAC-009",
          "category": "レポーティング",
          "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { supabase } from '@/supabase';\nimport Topbar from '@/components/Topbar';\nimport { FaChartLine, FaCalendarAlt, FaPlayCircle } from 'react-icons/fa';\nimport { BiLoaderAlt } from 'react-icons/bi';\n\nconst ProgressReportPage: React.FC = () => {\n  const router = useRouter();\n  const [selectedProject, setSelectedProject] = useState('');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [projects, setProjects] = useState([]);\n\n  useEffect(() => {\n    fetchProjects();\n  }, []);\n\n  const fetchProjects = async () => {\n    try {\n      const { data, error } = await supabase.from('projects').select('id, name');\n      if (error) throw error;\n      setProjects(data);\n    } catch (error) {\n      console.error('プロジェクトの取得に失敗しました:', error);\n      setProjects([\n        { id: '1', name: 'プロジェクトA' },\n        { id: '2', name: 'プロジェクトB' },\n        { id: '3', name: 'プロジェクトC' },\n      ]);\n    }\n  };\n\n  const handleGenerateReport = async () => {\n    if (!selectedProject || !startDate || !endDate) {\n      alert('すべての項目を入力してください。');\n      return;\n    }\n\n    setIsGenerating(true);\n    setProgress(0);\n\n    try {\n      // 進捗をシミュレート\n      for (let i = 0; i <= 100; i += 10) {\n        await new Promise(resolve => setTimeout(resolve, 500));\n        setProgress(i);\n      }\n\n      const { data, error } = await supabase\n        .from('progress_reports')\n        .insert({\n          project_id: selectedProject,\n          report: {\n            overall_progress: 75,\n            phases: [\n              { name: '要件定義', progress: 100, status: '完了' },\n              { name: '設計', progress: 90, status: '進行中' },\n              { name: '開発', progress: 60, status: '進行中' },\n              { name: 'テスト', progress: 20, status: '進行中' },\n            ],\n          },\n        })\n        .select();\n\n      if (error) throw error;\n\n      router.push('/progress-report-display');\n    } catch (error) {\n      console.error('レポート生成に失敗しました:', error);\n      alert('レポート生成に失敗しました。もう一度お試しください。');\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100 flex flex-col\">\n      <Topbar />\n      <div className=\"flex-grow container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-8 text-gray-800\">進捗レポート生成</h1>\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\n          <div className=\"mb-6\">\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"project\">\n              レポート対象プロジェクト\n            </label>\n            <select\n              id=\"project\"\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              value={selectedProject}\n              onChange={(e) => setSelectedProject(e.target.value)}\n            >\n              <option value=\"\">プロジェクトを選択してください</option>\n              {projects.map((project) => (\n                <option key={project.id} value={project.id}>\n                  {project.name}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"mb-6\">\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"startDate\">\n              開始日\n            </label>\n            <input\n              type=\"date\"\n              id=\"startDate\"\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              value={startDate}\n              onChange={(e) => setStartDate(e.target.value)}\n            />\n          </div>\n          <div className=\"mb-6\">\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"endDate\">\n              終了日\n            </label>\n            <input\n              type=\"date\"\n              id=\"endDate\"\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              value={endDate}\n              onChange={(e) => setEndDate(e.target.value)}\n            />\n          </div>\n          <button\n            className=\"w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-md transition duration-300 flex items-center justify-center\"\n            onClick={handleGenerateReport}\n            disabled={isGenerating}\n          >\n            {isGenerating ? (\n              <>\n                <BiLoaderAlt className=\"animate-spin mr-2\" />\n                生成中...\n              </>\n            ) : (\n              <>\n                <FaPlayCircle className=\"mr-2\" />\n                レポート生成開始\n              </>\n            )}\n          </button>\n          {isGenerating && (\n            <div className=\"mt-4\">\n              <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n                <div\n                  className=\"bg-blue-600 h-2.5 rounded-full\"\n                  style={{ width: `${progress}%` }}\n                ></div>\n              </div>\n              <p className=\"text-center mt-2 text-sm text-gray-600\">\n                進捗: {progress}%\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressReportPage;"
        }
      ]
    },
    {
      "component": "ドキュメント表示エリア 編集ボタン ダウンロードボタン",
      "accessRight": "ログインユーザー",
      "fileName": "document-view.tsx",
      "operatingProcedure": "1. 生成されたドキュメントを確認\n2. 必要に応じて編集ボタンをクリックして内容を修正\n3. ダウンロードボタンをクリックしてドキュメントをエクスポート",
      "description": "生成された開発ドキュメントを表示する画面",
      "id": "SCR-011",
      "screenName": "ドキュメント表示画面",
      "category": "表示",
      "user": "新規事業企画部門 開発部門 営業部門",
      "relatedBackendHandles": []
    },
    {
      "component": "ソースコード表示エリア シンタックスハイライト 編集ボタン ダウンロードボタン",
      "accessRight": "ログインユーザー",
      "fileName": "code-view.tsx",
      "operatingProcedure": "1. 生成されたソースコードを確認\n2. 必要に応じて編集ボタンをクリックして内容を修正\n3. ダウンロードボタンをクリックしてソースコードをエクスポート",
      "description": "生成されたソースコードを表示する画面",
      "id": "SCR-012",
      "screenName": "ソースコード表示画面",
      "category": "表示",
      "user": "開発部門",
      "relatedBackendHandles": []
    },
    {
      "component": "チェック結果サマリー 詳細結果リスト 改善提案",
      "accessRight": "ログインユーザー",
      "fileName": "quality-check-result.tsx",
      "operatingProcedure": "1. チェック結果のサマリーを確認\n2. 詳細結果リストで個別の問題点を確認\n3. 改善提案を参考に必要な修正を行う",
      "description": "品質チェックの結果を表示する画面",
      "id": "SCR-013",
      "screenName": "品質チェック結果画面",
      "category": "表示",
      "user": "開発部門",
      "relatedBackendHandles": []
    },
    {
      "component": "整合性スコア 不整合箇所リスト 修正提案",
      "accessRight": "ログインユーザー",
      "fileName": "consistency-check-result.tsx",
      "operatingProcedure": "1. 整合性スコアを確認\n2. 不整合箇所リストで具体的な問題点を確認\n3. 修正提案を参考に必要な調整を行う",
      "description": "ドキュメント間の整合性チェック結果を表示する画面",
      "id": "SCR-014",
      "screenName": "整合性確認結果画面",
      "category": "表示",
      "user": "開発部門",
      "relatedBackendHandles": []
    },
    {
      "component": "総工数表示 フェーズ別工数内訳 工数調整オプション",
      "accessRight": "ログインユーザー",
      "fileName": "work-estimation-result.tsx",
      "operatingProcedure": "1. 総工数を確認\n2. フェーズ別工数内訳を確認\n3. 必要に応じて工数調整オプションで見積を調整\n4. 調整後の工数をプロジェクト計画に反映",
      "description": "自動生成された工数見積結果を表示する画面",
      "id": "SCR-015",
      "screenName": "工数見積結果画面",
      "category": "表示",
      "user": "新規事業企画部門 開発部門",
      "relatedBackendHandles": []
    },
    {
      "component": "提案資料プレビュー 編集ボタン エクスポートボタン",
      "accessRight": "ログインユーザー",
      "fileName": "proposal-view.tsx",
      "operatingProcedure": "1. 生成された提案資料をプレビュー\n2. 必要に応じて編集ボタンをクリックして内容を修正\n3. エクスポートボタンをクリックして提案資料をダウンロードまたは印刷",
      "description": "自動生成された提案資料を表示する画面",
      "id": "SCR-016",
      "screenName": "提案資料表示画面",
      "category": "表示",
      "user": "営業部門",
      "relatedBackendHandles": []
    },
    {
      "component": "全体進捗グラフ フェーズ別進捗状況 課題リスト",
      "accessRight": "ログインユーザー",
      "fileName": "progress-report-view.tsx",
      "operatingProcedure": "1. 全体進捗グラフで進捗状況を視覚的に確認\n2. フェーズ別進捗状況で詳細を確認\n3. 課題リストで現在の問題点や遅延要因を確認\n4. 必要に応じてプロジェクト計画の調整を検討",
      "description": "自動生成された進捗レポートを表示する画面",
      "id": "SCR-017",
      "screenName": "進捗レポート表示画面",
      "category": "表示",
      "user": "新規事業企画部門 開発部門 営業部門",
      "relatedBackendHandles": []
    }
  ]
}
